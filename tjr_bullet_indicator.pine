//@version=6
indicator("BPR [TakingProphets]", overlay=true, max_bars_back=500, max_boxes_count=500, max_lines_count=500, max_labels_count=500)

//----------------- UTILITIES & GUARDRAILS -----------------//
safeDelBox(x) =>
    if not na(x)
        box.delete(x)
safeDelLine(x) =>
    if not na(x)
        line.delete(x)
safeDelLabel(x) =>
    if not na(x)
        label.delete(x)

getBox(a, i)   => (i >= 0 and i < array.size(a)) ? array.get(a, i) : box(na)
getLine(a, i)  => (i >= 0 and i < array.size(a)) ? array.get(a, i) : line(na)
getLabel(a, i) => (i >= 0 and i < array.size(a)) ? array.get(a, i) : label(na)
getFloat(a, i) => (i >= 0 and i < array.size(a)) ? array.get(a, i) : float(na)
getInt(a, i)   => (i >= 0 and i < array.size(a)) ? array.get(a, i) : int(na)
getBool(a, i)  => (i >= 0 and i < array.size(a)) ? array.get(a, i) : bool(na)
inSess(tf, s, tz) => not na(time(tf, s, tz))

//-------------------- INPUTS --------------------//
groupBPR = "BPR"
onOff = input.bool(true, "On/Off", group=groupBPR, inline="BPR_HDR")
bprColor = input.color(color.green, "Color", group=groupBPR, inline="BPR_HDR")
opacityPct = input.int(30, "Opacity (0-100)", minval=0, maxval=100, group=groupBPR, inline="BPR_HDR")
midlineOn = input.bool(true, "Midline", group=groupBPR, inline="BPR_HDR")
labelOpt = input.string("Tiny", "Label size", options=["Tiny","Small","Normal"], group=groupBPR, inline="BPR_HDR")

hideId1 = input.string("", "Hide ID 1", group=groupBPR, inline="BPR_HIDE")
hideId2 = input.string("", "Hide ID 2", group=groupBPR, inline="BPR_HIDE")
hideId3 = input.string("", "Hide ID 3", group=groupBPR, inline="BPR_HIDE")

searchStart = input.string("16:30", "Search start (HH:MM)", group=groupBPR, inline="BPR_T1")
searchEnd   = input.string("18:30", "Search end (HH:MM)", group=groupBPR, inline="BPR_T1")
displayStart= input.string("16:30", "Display start (HH:MM)", group=groupBPR, inline="BPR_T2")
displayEnd  = input.string("18:30", "Display end (HH:MM)", group=groupBPR, inline="BPR_T2")
deleteAt    = input.string("23:00", "Delete at (HH:MM)", group=groupBPR, inline="BPR_T3")

pvOn   = input.bool(false, "Preview", group=groupBPR, inline="BPR_PV")
pvTf   = input.string("30", "Source TF", options=["15","30","60","240","D"], group=groupBPR, inline="BPR_PV")
pvN    = input.int(4, "Show last N", minval=0, maxval=10, group=groupBPR, inline="BPR_PV")

//------------------ HELPERS ------------------//
labelSizeFromStr(s) => s == "Small" ? size.small : s == "Normal" ? size.normal : size.tiny

placeLabel(top, bot, t0) =>
    padY = math.max((top - bot) * 0.02, syminfo.mintick * 2)
    minH = syminfo.mintick * (labelOpt == "Tiny" ? 6 : labelOpt == "Small" ? 10 : 14)
    y = (top - bot) >= minH ? (top - padY) : (top + padY)
    [t0 + 30 * 1000, y, labelSizeFromStr(labelOpt)]

//------------------- TIME FLAGS -------------------//
HHMM(strT) =>
    parts = str.split(strT, ":")
    h = int(str.tonumber((array.size(parts) > 0) ? array.get(parts, 0) : "0"))
    m = int(str.tonumber((array.size(parts) > 1) ? array.get(parts, 1) : "0"))
    str.tostring(h, "00") + str.tostring(m, "00")

HHMMplus1(strT) =>
    parts = str.split(strT, ":")
    h = int(str.tonumber((array.size(parts) > 0) ? array.get(parts, 0) : "0"))
    m = int(str.tonumber((array.size(parts) > 1) ? array.get(parts, 1) : "0"))
    m += 1
    if m == 60
        m := 0
        h += 1
    str.tostring(h, "00") + str.tostring(m, "00")

tfMinutes(tf) =>
    tf == "D" ? 1440 : int(str.tonumber(tf))

//------------------- DATA MODEL -------------------//
var nextBprId = 1
var ids = array.new_int()
var liveBoxes = array.new_box()
var liveLines = array.new_line()
var liveLabels = array.new_label()

var pvBoxes = array.new_box()
var pvLines = array.new_line()
var pvLabels = array.new_label()
var pvTops = array.new_float()
var pvBots = array.new_float()
var pvTimes = array.new_int()

// For live session FVGs
var live_fvg_highs = array.new_float()
var live_fvg_lows = array.new_float()
var live_fvg_sides = array.new_int() // 1 = bull, -1 = bear
var live_fvg_times = array.new_int()

// For preview FVGs
var pv_fvg_highs = array.new_float()
var pv_fvg_lows = array.new_float()
var pv_fvg_sides = array.new_int()
var pv_fvg_times = array.new_int()

var hideIds = array.new_int()

//------------------- UTILITIES -------------------//
reset_live() =>
    for i = 0 to array.size(liveBoxes) - 1
        safeDelBox(getBox(liveBoxes, i))
        safeDelLine(getLine(liveLines, i))
        safeDelLabel(getLabel(liveLabels, i))
    array.clear(liveBoxes)
    array.clear(liveLines)
    array.clear(liveLabels)
    array.clear(ids)
    array.clear(live_fvg_highs)
    array.clear(live_fvg_lows)
    array.clear(live_fvg_sides)
    array.clear(live_fvg_times)

reset_preview() =>
    for i = 0 to array.size(pvBoxes) - 1
        safeDelBox(getBox(pvBoxes, i))
        safeDelLine(getLine(pvLines, i))
        safeDelLabel(getLabel(pvLabels, i))
    array.clear(pvBoxes)
    array.clear(pvLines)
    array.clear(pvLabels)
    array.clear(pvTops)
    array.clear(pvBots)
    array.clear(pvTimes)
    array.clear(pv_fvg_highs)
    array.clear(pv_fvg_lows)
    array.clear(pv_fvg_sides)
    array.clear(pv_fvg_times)

fillA  = color.new(bprColor, opacityPct)
pvFill = color.new(bprColor, 40)

//------------------- BUILDERS -------------------//
make_bpr(_tStart, _top, _bot, _id) =>
    if array.includes(hideIds, _id)
        return
    visB  = inDisplayTF ? fillA : color(na)
    visBr = inDisplayTF ? color.black : color(na)
    b = box.new(_tStart, _top, _tStart + 5 * 60000, _bot, xloc=xloc.bar_time, extend=extend.right, border_color=visBr, bgcolor=visB)
    mid = (_top + _bot) / 2
    [lx, ly, lsz] = placeLabel(_top, _bot, _tStart)
    visLn = inDisplayTF and midlineOn ? color.black : color(na)
    ln = line.new(_tStart, mid, _tStart + 5 * 60000, mid, xloc=xloc.bar_time, extend=extend.right, color=visLn, style=line.style_dashed)
    visTxt = inDisplayTF ? color.black : color(na)
    lb = label.new(lx, ly, "BPR #" + str.tostring(_id), xloc=xloc.bar_time, yloc=yloc.price, style=label.style_label_left, size=lsz, textcolor=visTxt, color=color(na))
    array.push(ids, _id)
    array.push(liveBoxes, b)
    array.push(liveLines, ln)
    array.push(liveLabels, lb)
    while array.size(liveBoxes) > 500
        safeDelBox(array.shift(liveBoxes))
        safeDelLine(array.shift(liveLines))
        safeDelLabel(array.shift(liveLabels))
        array.shift(ids)

make_preview_bpr(_tStart, _top, _bot) =>
    tfMs = tfMinutes(pvTf) * 60000
    visB  = inDisplayTF ? pvFill : color(na)
    visBr = inDisplayTF ? color.black : color(na)
    b = box.new(_tStart, _top, _tStart + tfMs, _bot, xloc=xloc.bar_time, extend=extend.right, border_color=visBr, bgcolor=visB)
    mid = (_top + _bot) / 2
    [lx, ly, lsz] = placeLabel(_top, _bot, _tStart)
    visLn = inDisplayTF and midlineOn ? color.black : color(na)
    ln = line.new(_tStart, mid, _tStart + tfMs, mid, xloc=xloc.bar_time, extend=extend.right, color=visLn, style=line.style_dashed)
    visTxt = inDisplayTF ? color.black : color(na)
    lb = label.new(lx, ly, "BPR [PV]", xloc=xloc.bar_time, yloc=yloc.price, style=label.style_label_left, size=lsz, textcolor=visTxt, color=color(na))
    array.push(pvBoxes, b)
    array.push(pvLines, ln)
    array.push(pvLabels, lb)
    array.push(pvTops, _top)
    array.push(pvBots, _bot)
    array.push(pvTimes, _tStart)

update_live_styles() =>
    i = 0
    while i < array.size(liveBoxes)
        id = getInt(ids, i)
        if array.includes(hideIds, id)
            safeDelBox(array.remove(liveBoxes, i))
            safeDelLine(array.remove(liveLines, i))
            safeDelLabel(array.remove(liveLabels, i))
            array.remove(ids, i)
            continue
        b = getBox(liveBoxes, i)
        ln = getLine(liveLines, i)
        lb = getLabel(liveLabels, i)
        if not na(b)
            box.set_bgcolor(b, inDisplayTF ? fillA : color(na))
            box.set_border_color(b, inDisplayTF ? color.black : color(na))
        if not na(ln)
            line.set_color(ln, inDisplayTF and midlineOn ? color.black : color(na))
        if not na(lb)
            label.set_textcolor(lb, inDisplayTF ? color.black : color(na))
            label.set_color(lb, color(na))
            label.set_size(lb, labelSizeFromStr(labelOpt))
        i += 1

update_preview_styles() =>
    for i = 0 to array.size(pvBoxes) - 1
        b = getBox(pvBoxes, i)
        ln = getLine(pvLines, i)
        lb = getLabel(pvLabels, i)
        if not na(b)
            box.set_bgcolor(b, inDisplayTF ? pvFill : color(na))
            box.set_border_color(b, inDisplayTF ? color.black : color(na))
        if not na(ln)
            line.set_color(ln, inDisplayTF and midlineOn ? color.black : color(na))
        if not na(lb)
            label.set_color(lb, color(na))
            label.set_textcolor(lb, inDisplayTF ? color.black : color(na))
            label.set_size(lb, labelSizeFromStr(labelOpt))

//------------------- SESSION & TIME -------------------//
sessSearch  = HHMM(searchStart)  + "-" + HHMM(searchEnd)
sessDisplay = HHMM(displayStart) + "-" + HHMM(displayEnd)
sessDelete  = HHMM(deleteAt)     + "-" + HHMMplus1(deleteAt)
TZ = "Asia/Jerusalem"
inSearch5   = inSess("5", sessSearch, TZ)
inDisplayTF = inSess(timeframe.period, sessDisplay, TZ)
tDel        = time("1", sessDelete, TZ)
cleanup     = not na(tDel) and na(tDel[1])

//------------------- MAIN -------------------//
if barstate.isnew
    if cleanup
        reset_live()
        nextBprId := 1
    else
        if not onOff
            reset_live()
        if not pvOn and (array.size(pvBoxes) > 0 or array.size(pvLines) > 0 or array.size(pvLabels) > 0)
            reset_preview()
    array.clear(hideIds)
    id1 = int(str.tonumber(str.trim(hideId1)))
    if not na(id1) and not array.includes(hideIds, id1)
        array.push(hideIds, id1)
    id2 = int(str.tonumber(str.trim(hideId2)))
    if not na(id2) and not array.includes(hideIds, id2)
        array.push(hideIds, id2)
    id3 = int(str.tonumber(str.trim(hideId3)))
    if not na(id3) and not array.includes(hideIds, id3)
        array.push(hideIds, id3)

//--- LIVE logic (5min session-gated, זיהוי bpr מדויק)
if onOff
    t5   = request.security(syminfo.tickerid, "5", time, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    h5   = request.security(syminfo.tickerid, "5", high, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    l5   = request.security(syminfo.tickerid, "5", low,  gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    c5   = request.security(syminfo.tickerid, "5", close, gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    newBar5 = (t5 != t5[1])
    bullFvg = l5 > h5[2]
    bearFvg = h5 < l5[2]
    if inSearch5 and newBar5
        if bullFvg
            array.push(live_fvg_highs, h5[2])
            array.push(live_fvg_lows, l5)
            array.push(live_fvg_sides, 1)
            array.push(live_fvg_times, t5)
        if bearFvg
            array.push(live_fvg_highs, h5)
            array.push(live_fvg_lows, l5[2])
            array.push(live_fvg_sides, -1)
            array.push(live_fvg_times, t5)
        // invalidate by close-only (wick OK): bull invalid if close <= lower bound; bear invalid if close >= upper bound
        i=0
        while i<array.size(live_fvg_sides)
            s = array.get(live_fvg_sides,i)
            hi= array.get(live_fvg_highs,i), lo=array.get(live_fvg_lows,i)
            inv = (s== 1 and c5 <= hi) or (s==-1 and c5 >= lo)
            if inv
                array.remove(live_fvg_highs,i), array.remove(live_fvg_lows,i), array.remove(live_fvg_sides,i), array.remove(live_fvg_times,i)
            else
                i += 1
        last_side = array.size(live_fvg_sides) > 0 ? array.get(live_fvg_sides, array.size(live_fvg_sides) - 1) : na
        if last_side == 1 and array.size(live_fvg_sides) > 1
            for k = array.size(live_fvg_sides) - 2 to 0
                if array.get(live_fvg_sides, k) == -1
                    bull_high = array.get(live_fvg_highs, array.size(live_fvg_highs) - 1)
                    bull_low  = array.get(live_fvg_lows,  array.size(live_fvg_lows) - 1)
                    bull_time = array.get(live_fvg_times, array.size(live_fvg_times) - 1)
                    bear_high = array.get(live_fvg_highs, k)
                    bear_low  = array.get(live_fvg_lows,  k)
                    bear_time = array.get(live_fvg_times, k)
                    overTop = math.min(bull_low, bear_low)
                    overBot = math.max(bull_high, bear_high)
                    if overTop > overBot
                        id = nextBprId
                        nextBprId += 1
                        tStart = math.min(bull_time, bear_time)
                        make_bpr(tStart, overTop, overBot, id)
                    break
        if last_side == -1 and array.size(live_fvg_sides) > 1
            for k = array.size(live_fvg_sides) - 2 to 0
                if array.get(live_fvg_sides, k) == 1
                    bear_high = array.get(live_fvg_highs, array.size(live_fvg_highs) - 1)
                    bear_low  = array.get(live_fvg_lows,  array.size(live_fvg_lows) - 1)
                    bear_time = array.get(live_fvg_times, array.size(live_fvg_times) - 1)
                    bull_high = array.get(live_fvg_highs, k)
                    bull_low  = array.get(live_fvg_lows,  k)
                    bull_time = array.get(live_fvg_times, k)
                    overTop = math.min(bear_low, bull_low)
                    overBot = math.max(bear_high, bull_high)
                    if overTop > overBot
                        id = nextBprId
                        nextBprId += 1
                        tStart = math.min(bear_time, bull_time)
                        make_bpr(tStart, overTop, overBot, id)
                    break
    update_live_styles()

//--- Preview logic (BPR detection בדיוק כמו live, רק פי HTF)
if pvOn
    tPv   = request.security(syminfo.tickerid, pvTf, time,    gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    hPv   = request.security(syminfo.tickerid, pvTf, high,    gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    lPv   = request.security(syminfo.tickerid, pvTf, low,     gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    cPv   = request.security(syminfo.tickerid, pvTf, close,   gaps=barmerge.gaps_off, lookahead=barmerge.lookahead_off)
    bullFvg_pv = lPv > hPv[2]
    bearFvg_pv = hPv < lPv[2]
    if bullFvg_pv
        array.push(pv_fvg_highs, hPv[2])
        array.push(pv_fvg_lows, lPv)
        array.push(pv_fvg_sides, 1)
        array.push(pv_fvg_times, tPv)
    if bearFvg_pv
        array.push(pv_fvg_highs, hPv)
        array.push(pv_fvg_lows, lPv[2])
        array.push(pv_fvg_sides, -1)
        array.push(pv_fvg_times, tPv)
    // invalidate by close-only (wick OK): bull invalid if close <= lower bound; bear invalid if close >= upper bound
    j=0
    while j<array.size(pv_fvg_sides)
        s = array.get(pv_fvg_sides,j)
        hi= array.get(pv_fvg_highs,j), lo=array.get(pv_fvg_lows,j)
        inv = (s== 1 and cPv <= hi) or (s==-1 and cPv >= lo)
        if inv
            array.remove(pv_fvg_highs,j), array.remove(pv_fvg_lows,j), array.remove(pv_fvg_sides,j), array.remove(pv_fvg_times,j)
        else
            j += 1
    last_side_pv = array.size(pv_fvg_sides) > 0 ? array.get(pv_fvg_sides, array.size(pv_fvg_sides) - 1) : na
    if last_side_pv == 1 and array.size(pv_fvg_sides) > 1
        for k = array.size(pv_fvg_sides) - 2 to 0
            if array.get(pv_fvg_sides, k) == -1
                bull_high = array.get(pv_fvg_highs, array.size(pv_fvg_highs) - 1)
                bull_low  = array.get(pv_fvg_lows,  array.size(pv_fvg_lows) - 1)
                bull_time = array.get(pv_fvg_times, array.size(pv_fvg_times) - 1)
                bear_high = array.get(pv_fvg_highs, k)
                bear_low  = array.get(pv_fvg_lows,  k)
                bear_time = array.get(pv_fvg_times, k)
                overTop = math.min(bull_low, bear_low)
                overBot = math.max(bull_high, bear_high)
                if overTop > overBot
                    tStart = math.min(bull_time, bear_time)
                    make_preview_bpr(tStart, overTop, overBot)
                break
    if last_side_pv == -1 and array.size(pv_fvg_sides) > 1
        for k = array.size(pv_fvg_sides) - 2 to 0
            if array.get(pv_fvg_sides, k) == 1
                bear_high = array.get(pv_fvg_highs, array.size(pv_fvg_highs) - 1)
                bear_low  = array.get(pv_fvg_lows,  array.size(pv_fvg_lows) - 1)
                bear_time = array.get(pv_fvg_times, array.size(pv_fvg_times) - 1)
                bull_high = array.get(pv_fvg_highs, k)
                bull_low  = array.get(pv_fvg_lows,  k)
                bull_time = array.get(pv_fvg_times, k)
                overTop = math.min(bear_low, bull_low)
                overBot = math.max(bear_high, bull_high)
                if overTop > overBot
                    tStart = math.min(bear_time, bull_time)
                    make_preview_bpr(tStart, overTop, overBot)
                break
    while array.size(pvBoxes) > pvN
        safeDelBox(array.shift(pvBoxes))
        safeDelLine(array.shift(pvLines))
        safeDelLabel(array.shift(pvLabels))
        array.shift(pvTops)
        array.shift(pvBots)
        array.shift(pvTimes)
    update_preview_styles()
